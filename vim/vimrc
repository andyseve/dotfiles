" Maintained by Anish Sevekari
" Last Updated: Fri 26 Jan 2018 09:44:04 AM EST

set nocompatible

" vim-plug {{{
  " change installation paths based on os
  if !exists("g:bundle_path")
    if has("win64") || has("win32")
      let g:bundle_path = '~/vimfiles/bundle'
    else
      let g:bundle_path = '~/.vim/bundle'
    endif
  endif

  call plug#begin(bundle_path)
  Plug 'scrooloose/nerdtree'
  Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'SirVer/ultisnips'
  Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer --js-completer'}
  " TODO: Write a function that compiles ycm only if needed
  Plug 'lervag/vimtex'
  Plug 'vim-syntastic/syntastic'
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'sjl/gundo.vim'
  Plug 'tpope/vim-fugitive'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'jiangmiao/auto-pairs'

  Plug 'altercation/vim-colors-solarized'
  call plug#end()
" }}}
" Core Settings {{{
  syntax enable
  set encoding=utf-8
  filetype plugin indent on
  if(has("gui_running"))
    " Set colorscheme to solarized dark
    set background=dark
    colorscheme solarized
    if has("win64") || has("win32")
      set guifont=Consolas:h10:cANSI
    else
      set guifont=ubuntu\ Mono\ 12
    endif
  else
    colorscheme desert
  endif
  set backspace=indent,eol,start
  set ruler " Display cursor position
  " Numbering Settings and functions {{{
    set number
    " Toggle between relative and absolute numbers
    function! RelativeNumber()
      set number
      set relativenumber
    endfunc
    function! AbsoluteNumber()
      set norelativenumber
      set number
    endfunc
    " Autocommands to toggle between relative and absolute numbering
    augroup AnishsNumber
      autocmd!
      autocmd FocusLost * call AbsoluteNumber()
      autocmd FocusGained * call RelativeNumber()
      autocmd BufLeave * call AbsoluteNumber()
      autocmd BufEnter * call RelativeNumber()
      autocmd InsertEnter * call AbsoluteNumber()
      autocmd InsertLeave * call RelativeNumber()
  " }}}
  set confirm " Exit confirmation
  set wildmenu
  set lazyredraw " Lazy redrawing of screen, force redraw using :redraw
  set showmatch " Highlight matching braces
  set modeline " Enables modlines (File specific vim settings)
  set modelines=1 " Read only the last line for vim specific options
  set autoread " Read changes from outside automatically
  set nomousehide " To fix a bug that causes cursor to dissapear
  set mouse=a
  set textwidth=0 " Textwidth to infinite
  set spell spelllang=en_us " Set US English for spellchecking
  set nospell
" }}}
" Tab settings {{{
  set autoindent
  set smartindent

  set shiftwidth=2
  set softtabstop=2
  set noexpandtab
" }}}
" Search settings {{{
  set hlsearch " Highlight searches
  set incsearch " Incremental search (As characters are entered)
  " Clear out search highlights
  nnoremap <leader><space> :nohlsearch<CR> 
" }}}
" Fold Settings {{{
  set foldenable
  set foldlevelstart=3
" }}}
" Movements {{{
  nnoremap j gj
  nnoremap k gk
  vnoremap j gj
  vnoremap k gk
" }}}
" Bindings {{{
  nnoremap :W :w
  nnoremap :Q :q

  " Quick open files
  if has("win64") || has("win32")
    if(has("gui_running"))
      nnoremap <leader>ev :!gvim ~/_vimrc<CR>
    else
      nnoremap <leader>ev :vsplit ~/_vimrc<CR>
    endif
    nnoremap <leader>sv :source ~/_vimrc<CR>
    nnoremap <leader>es :UltiSnipsEdit<CR>
  else
    if(has("gui_running"))
      nnoremap <leader>ev :!gvim ~/.vimrc<CR>
      nnoremap <leader>eb :!gvim ~/.bashrc<CR>
    else
      nnoremap <leader>ev :vsplit ~/.vimrc<CR>
      nnoremap <leader>eb :vsplit ~/.bashrc<CR>
    endif
    nnoremap <leader>sv :source ~/.vimrc<CR>
    nnoremap <leader>es :UltiSnipsEdit<CR>
  endif

  " Hotkeys for saving in gvim
  if(has("gui_running"))
    nnoremap <c-s> :update<CR>
    vnoremap <c-s> <c-c>:update<CR>
    inoremap <c-s> <c-o>:update<CR>
  endif

  " Global Copy and Paste
  nnoremap <leader>p "+gP
  vnoremap <leader>p "+gP
  nnoremap <leader>y "+y
  vnoremap <leader>y "+y

  " Backspace to delete words
  inoremap <c-backspace> <c-o>dF

  " Enter to expand snippets when possible
  let g:ulti_expand_or_jump_res = 0
  function! ExpandSnippetOrCarriageReturn()
    let tmp = UltiSnips#ExpandSnippetOrJump()
    if g:ulti_expand_or_jump_res > 0
      return tmp
    else
      return "\<CR>"
    endif
  endfunc
  inoremap <expr> <CR> "<C-R>=ExpandSnippetOrCarriageReturn()<CR>"
" }}}
" Plugin Configurations {{{ 
  " Ultisnips Configuration
  set rtp+=~/.vim "Adding .vim to runtime path
  let g:UltiSnipsExpandTrigger="<c-j>"
  let g:UltiSnipsJumpForwardTrigger="<c-j>"
  let g:UltiSnipsJumpBackwardTrigger="<c-h>"
  let g:UltiSnipsListSnippets="<c-l>"

  let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips"
  let g:UltiSnipsSnippetsDirectoris=['UltiSnips']
  let g:UltiSnipsEditSplit="horizontal"

  " YouCompleteMe Configuration
  let g:ycm_global_extra_conf='~/.ycm_extra_conf.py'
  let g:ycm_collect_identifiers_from_tag_files = 1
  let g:ycm_seed_identifier_with_syntax = 1
  if has("win64") || has("win32")
    let g:ycm_server_python_interpreter = 'C:\Python\Python27\python2.exe'
  else
    let g:ycm_server_python_interpreter = '/usr/bin/python2'
  endif
  if !exists('g:ycm_sematics_triggers')
    let g:ycm_semantic_triggers = {}
  endif
  let g:ycm_semantic_triggers.cpp = ['re!(?=[a-zA-Z0-9_]{3})']
  let g:ycm_semantic_triggers.tex = g:vimtex#re#youcompleteme

  " Gundo Configuration
  let g:gundo_prefer_python3 = 1
  nnoremap <leader>u :GundoToggle<CR>

  " NERDTree Configuration
  let g:NERDTreeQuitOnOpen = 1
  nnoremap <M-\> :NERDTreeToggle<CR>
  inoremap <M-\> <c-o>:NERDTreeToggle<CR>

  " vimtex configuration
  let g:vimtex_enabled = 1
  let g:vimtex_view_automatic = 1
  if has("win64") || has("win32")
  else
    let g:vimtex_view_method = 'zathura'
  endif
  " Syntastic Configuration
  
  " Airline Configuration
  let g:airline_solarized_bg='dark'
" }}}
" Functions {{{
  " Update last modified entries
  function! UpdateLastModified()
    " TODO: Delete the update search
    let b:cur_window = winsaveview()
    let b:last_line = line('$')
    if(b:last_line > 20)
      let b:last_line = 20
    endif
    let cmd = "0," . b:last_line . "s/Last \\(Modified\\|Edited\\|Changed\\|Updated\\): \\zs.*/\\=strftime(\"%c\")"
    echo cmd
    execute cmd
    :nohlsearch
    call winrestview(b:cur_window)
  endfunc
" }}}
" Autocommands {{{
  augroup Anishs
    autocmd!
    " Preserve cursor position on opening the file
    autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \	  exe "normal! g`\"" |
      \ endif
    " Update last modified tags at start of the file
    autocmd BufWritePre * silent! call UpdateLastModified() | redraw
    " Close if only windows present is NERDTree
    autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
    autocmd BufEnter * :nohlsearch
  augroup END
" }}}

" vim:foldmethod=marker:foldlevel=0:nospell
