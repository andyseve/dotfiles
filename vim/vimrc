" Maintained by Anish Sevekari
" Last Updated: Mon 26 Mar 2018 06:43:11 PM EDT

set nocompatible

" vim-plug {{{
  " change installation paths based on os
  if !exists("g:bundle_path")
    if has("win64") || has("win32")
      let g:bundle_path = '~/vimfiles/bundle'
    else
      let g:bundle_path = '~/.vim/bundle'
    endif
  endif

  function! BuildYCM(info)
    " Builds ycm only when forced, installed or updated
    if a:info.status == 'installed' || a:info.force || a:info.status == 'updated'
      !./install.py --clang-completer --js-completer
    endif
  endfunc

  call plug#begin(bundle_path)
  Plug 'scrooloose/nerdtree'
  Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'SirVer/ultisnips'
  Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM')}
  Plug 'lervag/vimtex'
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'sjl/gundo.vim'
  Plug 'tpope/vim-fugitive'
  Plug 'jiangmiao/auto-pairs'
	Plug 'hecal3/vim-leader-guide'
	Plug 'w0rp/ale'
	Plug 'scrooloose/nerdcommenter'

  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'altercation/vim-colors-solarized'
  call plug#end()
" }}}
" Core Settings {{{
  syntax enable
  set encoding=utf-8
  filetype plugin indent on
	" Setting Colorscheme {{{
  if(has("gui_running"))
    set background=dark
    colorscheme solarized
    if has("win64") || has("win32")
      set guifont=Consolas:h10:cANSI
    else
      set guifont=ubuntu\ Mono\ 14
    endif
  else
    set background=dark
    colorscheme desert
  endif
	" }}}
  set backspace=indent,eol,start
  set ruler " Display cursor position
  " Numbering Settings and functions {{{
    set number
    " Toggle between relative and absolute numbers
    function! RelativeNumber()
      set number
      set relativenumber
    endfunc
    function! AbsoluteNumber()
      set norelativenumber
      set number
    endfunc
    " Autocommands to toggle between relative and absolute numbering
    augroup AnishsNumber
      autocmd!
      autocmd FocusLost * call AbsoluteNumber()
      autocmd FocusGained * call RelativeNumber()
      autocmd BufLeave * call AbsoluteNumber()
      autocmd BufEnter * call RelativeNumber()
      autocmd InsertEnter * call AbsoluteNumber()
      autocmd InsertLeave * call RelativeNumber()
  " }}}
  set confirm " Exit confirmation
  set wildmenu
  set lazyredraw " Lazy redrawing of screen, force redraw using :redraw
  set showmatch " Highlight matching braces
  set modeline " Enables modlines (File specific vim settings)
  set modelines=1 " Read only the last line for vim specific options
  set autoread " Read changes from outside automatically
  set nomousehide " To fix a bug that causes cursor to dissapear
  set mouse=a
  set textwidth=0 " Textwidth to infinite
  set spell spelllang=en_us " Set US English for spellchecking

	let mapleader = "\\"
	
	" Turning off scrollbars
	set guioptions-=L
" }}}
" Tab settings {{{
  set autoindent
  set smartindent

  set shiftwidth=2
  set softtabstop=2
  set tabstop=2
  set noexpandtab
" }}}
" Search settings {{{
  set hlsearch " Highlight searches
  set incsearch " Incremental search (As characters are entered)
  " Clear out search highlights
  nnoremap <leader><space> :nohlsearch<CR> 
" }}}
" Fold Settings {{{
  set foldenable
  set foldlevelstart=3
" }}}
" Generic Bindings and Shortcuts {{{
  nnoremap :W :w
  nnoremap :Q :q
	nnoremap -d dd
	nnoremap -c ddO

	"Movements
  nnoremap j gj
  nnoremap k gk
  vnoremap j gj
  vnoremap k gk

  " Hotkeys for saving in gvim
  if(has("gui_running"))
    nnoremap <c-s> :update<CR>
    vnoremap <c-s> <c-c>:update<CR>
    inoremap <c-s> <c-o>:update<CR>
  endif

  " Backspace to delete words
  imap <c-backspace> <c-o>dF<space> 
	nmap <c-backspace> dF<space>
" }}}
" Plugin Configurations and Bindings {{{ 
  " Ultisnips Configuration {{{
	if has("win64") || has("win32")
		set rtp+=~/vimfiles 
		let g:UltiSnipsSnippetsDir="~/vimfiles/UltiSnips"
	else
		set rtp+=~/.vim
		let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips"
	endif
  let g:UltiSnipsExpandTrigger="<c-j>"
  let g:UltiSnipsJumpForwardTrigger="<c-j>"
  let g:UltiSnipsJumpBackwardTrigger="<c-h>"
  let g:UltiSnipsListSnippets="<c-l>"

  let g:UltiSnipsSnippetsDirectoris=['UltiSnips']
  let g:UltiSnipsEditSplit="horizontal"

  " Enter to expand snippets when possible
  let g:ulti_expand_or_jump_res = 0
  function! ExpandSnippetOrCarriageReturn()
    let tmp = UltiSnips#ExpandSnippetOrJump()
    if g:ulti_expand_or_jump_res > 0
      return tmp
    else
      return "\<CR>"
    endif
  endfunc
  inoremap <expr> <CR> "<C-R>=ExpandSnippetOrCarriageReturn()<CR>"
	" }}}
  " YouCompleteMe Configuration {{{
  let g:ycm_global_extra_conf='~/.ycm_extra_conf.py'
	let g:ycm_confirm_extra_conf = 0
  let g:ycm_collect_identifiers_from_tag_files = 1
  let g:ycm_seed_identifier_with_syntax = 1
	let g:ycm_complete_in_comments = 1
	let g:ycm_cache_omnifunc = 0
  if has("win64") || has("win32")
    let g:ycm_server_python_interpreter = 'C:\Python\Python36\python3.exe'
  else
    let g:ycm_server_python_interpreter = '/usr/bin/python2'
  endif
  if !exists('g:ycm_sematics_triggers')
    let g:ycm_semantic_triggers = {}
  endif
  let g:ycm_semantic_triggers.cpp = ['re!(?=[a-zA-Z0-9_]{3})']
  let g:ycm_semantic_triggers.tex = g:vimtex#re#youcompleteme
	" }}}
  " Gundo Configuration {{{
  let g:gundo_prefer_python3 = 1
  nnoremap <leader>u :GundoToggle<CR>
	" }}}
  " NERDTree Configuration {{{
  let g:NERDTreeQuitOnOpen = 1
  nnoremap <M-\> :NERDTreeToggle<CR>
  inoremap <M-\> <c-o>:NERDTreeToggle<CR>
		" There is an autocmd to close NERDTree window on exit, configured below
	" }}}
  " Vimtex configuration {{{
  let g:vimtex_enabled = 1
  let g:vimtex_view_automatic = 1
	let g:vimtex_toc_enabled = 1
	let g:vimtex_toc_depth = 1
	let g:vimtex_toc_show_included_files = 1
	let g:vimtex_toc_fold = 1
	" }}}
	" SumatraPDF config for windows {{{
  if has("win64") || has("win32")
    let g:vimtex_view_general_viewer = 'SumatraPDF.exe'
    let g:vimtex_view_general_options
      \ = ' -forward-search @tex @line @pdf'
      \ . ' -inverse-search "gvim --servername ' . v:servername
      \ . ' --remote-send \"^<C-\^>^<C-n^>'
      \ . ':drop \%f^<CR^>:\%l^<CR^>:normal\! zzzv^<CR^>'
      \ . ':execute ''drop '' . fnameescape(''\%f'')^<CR^>'
      \ . ':\%l^<CR^>:normal\! zzzv^<CR^>'
      \ . ':call remote_foreground('''.v:servername.''')^<CR^>^<CR^>\""' 
  else
    let g:vimtex_view_method = 'zathura'
  endif
	" }}}
	" Ale Configuration {{{
	" }}}
  " Airline Configuration {{{
  let g:airline_theme = 'solarized'
  let g:airline_solarized_bg = 'dark'
  let g:airline_powerline_fonts = 1
  let g:airline_inactive_collapse = 0
  let g:airline_skip_empty_sections = 1
  let g:airline#extensions#whitespace#enabled = 0
  
  " Airline symbols
  if !exists('g:airline_symbols')
    let g:airline_symbols ={}
  endif
  let g:airline_symbols.space = "\u3000"
  if has("win64") || has("win32")
    let g:airline_powerline_fonts = 0
    let g:airline_symbols.space = "\u0020"
  endif
	" }}}
  " Solarized Config for Terminal {{{
  let g:solarized_termtrans = 1
  let g:solarized_termcolors = 256
  let g:solarized_contrast = 'normal'
	" }}}
	" Vim Leader Guide Configuration {{{
	let g:lmap = {}
	
  " Global Copy and Paste
	noremap <Plug>(global-paste) "+gP
	noremap <Plug>(global-copy) "+y
  nnoremap <leader>p <Plug>(global-paste)
  vnoremap <leader>p <Plug>(global-paste)
  nnoremap <leader>y <Plug>(global-copy)
  vnoremap <leader>y <Plug>(global-copy)

	"Vimtex
	let g:lmap.l = {
				\'name': 'Latex',
				\}

	"Quick Edits
	let g:lmap.e = {
				\'name': 'Quick Edit',
				\'s':['UltiSnipsEdit', 'Snippets'],
				\'v':['e ~/dotfiles/vim/vimrc','Vimrc'],
				\'l':['e ~/dotfiles/latex/anishs.sty', 'Latex'],
				\}
  if(has("gui_running"))
    nnoremap <leader>ev :!gvim ~/dotfiles/vim/vimrc<CR>
  else
    nnoremap <leader>ev :vsplit ~/dotfiles/vim/vimrc<CR>
  endif
	if(has("win64") || has("win32"))
		nnoremap <leader>sv :source ~/_vimrc<CR>
	else
		nnoremap <leader>sv :source ~/.vimrc<CR>
	endif
  nnoremap <leader>es :UltiSnipsEdit<CR>
	
	"Git menu
	let g:lmap.g = {
				\'name': 'Git Menu',
				\'s': ['Gstatus', 'Git Status'],
				\'p': ['Gpull', 'Git Pull'],
				\'u': ['Gpush', 'Git Push'],
				\'c': ['Gcommit', 'Git Commit'],
				\'w': ['Gwrite', 'Git Write'],
				\'r': ['Gread', 'Git Read'],
				\}

	call leaderGuide#register_prefix_descriptions("\\", "g:lmap")
	nnoremap <silent> <leader> :<c-u>LeaderGuide '\'<CR>
	nnoremap <silent> <leader> :<c-u>LeaderGuideVisual '\' <CR>

	augroup AnishsVimLeader
		autocmd!
		autocmd FileType gitcommit noremap <buffer> <leader> <Plug>leaderguide-buffer
		autocmd BufEnter __Tagbar__ noremap <buffer> <leader> <Plug>leaderguide-buffer
		autocmd FileType NERDTreeType noremap <buffer> <leader> <Plug>leaderguide-buffer
	augroup END
	" }}}
	
" }}}
" Functions {{{
  " Update last modified entries
  function! UpdateLastModified()
    " TODO: Delete the update search
    let b:cur_window = winsaveview()
    let b:last_line = line('$')
    if(b:last_line > 20)
      let b:last_line = 20
    endif
    let cmd = "0," . b:last_line . "s/Last \\(Modified\\|Edited\\|Changed\\|Updated\\): \\zs.*/\\=strftime(\"%c\")"
    echo cmd
    execute cmd
    :nohlsearch
    call winrestview(b:cur_window)
  endfunc
" }}}
" Autocommands {{{
  augroup Anishs
    autocmd!
    " Preserve cursor position on opening the file
    autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \	  exe "normal! g`\"" |
      \ endif
    " Update last modified tags at start of the file
    autocmd BufWritePre * silent! call UpdateLastModified() | redraw
    " Close if only windows present is NERDTree
    autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
    autocmd BufEnter * :nohlsearch
  augroup END
" }}}

" vim:foldmethod=marker:foldlevel=0:nospell


