" Author: Anish Sevekari
" Last Updated: Tue 02 Apr 2019 05:43:29 PM EDT

set nocompatible

" # vim-plug
  " change installation paths based on os
  if !exists("g:bundle_path")
    if has("win64") || has("win32")
      let g:bundle_path = '~/vimfiles/bundle'
    else
      let g:bundle_path = '~/.vim/bundle'
    endif
  endif

  function! BuildYCM(info)
    " Builds ycm only when forced, installed or updated
    if a:info.status == 'installed' || a:info.force || a:info.status == 'updated'
			if has("win64") || has("win32")
				!python "%USERPROFILE%"\vimfiles\bundle\YouCompleteMe\install.py --clang-completer --js-completer
			else
				!python3 ~/.vim/bundle/YouCompleteMe/install.py --clang-completer --js-completer
			endif
    endif
  endfunc
  call plug#begin(bundle_path)
  Plug 'scrooloose/nerdtree'
  Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'SirVer/ultisnips'
	Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM')}
	"Plug 'Shougo/deoplete.nvim'
  "Plug 'roxma/nvim-yarp'
  "Plug 'roxma/vim-hug-neovim-rpc'
  Plug 'lervag/vimtex'
  Plug 'sjl/gundo.vim'
	Plug 'junegunn/fzf', {'do':'./install --bin'}
	Plug 'junegunn/fzf.vim'
  Plug 'tpope/vim-fugitive'
	Plug 'tpope/vim-surround'
	Plug 'tpope/vim-repeat'
	Plug 'hecal3/vim-leader-guide'
	Plug 'w0rp/ale'
	Plug 'scrooloose/nerdcommenter'
	Plug 'godlygeek/tabular'
	Plug 'mileszs/ack.vim'

  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'altercation/vim-colors-solarized'

	Plug 'msuperdock/vim-foldout'
  call plug#end()

" # Variables
	if(has("win64") || has("win32"))
		let g:vimdir = "~/vimfiles"
		let g:vimrc = "~/_vimrc"
	else
		let g:vimdir = "~/.vim"
		let g:vimrc = "~/.vimrc"
	endif

" # Core Settings
  syntax enable
  set encoding=utf-8
  filetype plugin indent on
	" Setting Colorscheme {{{
  if(has("gui_running"))
    set background=dark
    colorscheme solarized
    if has("win64") || has("win32")
      set guifont=Consolas:h12:cANSI
			set visualbell
    else
      set guifont=ubuntu\ Mono\ 12
    endif
  else
    set background=dark
    colorscheme desert
  endif
	" }}}
  set backspace=indent,eol,start
  set ruler " Display cursor position
  " Numbering Settings and functions {{{
    set number
    " Toggle between relative and absolute numbers
    function! RelativeNumber()
      set number
      set relativenumber
    endfunc
    function! AbsoluteNumber()
      set norelativenumber
      set number
    endfunc
    " Autocommands to toggle between relative and absolute numbering
    augroup AnishsNumber
      autocmd!
      autocmd FocusLost * call AbsoluteNumber()
      autocmd FocusGained * call RelativeNumber()
      autocmd BufLeave * call AbsoluteNumber()
      autocmd BufEnter * call RelativeNumber()
      autocmd InsertEnter * call AbsoluteNumber()
      autocmd InsertLeave * call RelativeNumber()
  " }}}
  set confirm " Exit confirmation
  set wildmenu
  set lazyredraw " Lazy redrawing of screen, force redraw using :redraw
  set showmatch " Highlight matching braces
  set modeline " Enables modlines (File specific vim settings)
  set modelines=1 " Read only the last line for vim specific options
  set autoread " Read changes from outside automatically
  set nomousehide " To fix a bug that causes cursor to dissapear
  set mouse=a
  set textwidth=0 " Textwidth to infinite
  set spelllang=en_us " Set US English for spellchecking
	set nospell
	let &viewoptions = 'folds,cursor' " Saves folds and cursor

	set updatetime=1000

	let mapleader = "\\"
	
	" Gui Options
	set guioptions-=L " Remove left scrollbar
	set guioptions-=T " Remove Toolbar

	" Back up directories
	if has("win64") || has("win32")
		set undodir=~/vimfiles/.undo//
		set backupdir=~/vimfiles/.backup//
		set directory=~/vimfiles/.swp//
	else
		set undodir=~/.vim/.undo//
		set backupdir=~/.vim/.backup//
		set directory=~/.vim/.swp//
	endif
" # Tab settings
  set autoindent
  set smartindent
	set breakindent

  set shiftwidth=2
  set softtabstop=2
  set tabstop=2
  set noexpandtab
" # Search settings
  set hlsearch " Highlight searches
  set incsearch " Incremental search (As characters are entered)
  " Clear out search highlights
  nnoremap <leader><space> :nohlsearch<CR> 
" # Fold Settings
  set foldenable
" # Generic Bindings and Shortcuts
  nnoremap :W :w
  nnoremap :Q :q
	nnoremap -d dd
	nnoremap -c ddO

	" Movements
  nnoremap j gj
  nnoremap k gk
  vnoremap j gj
  vnoremap k gk

  " Hotkeys for saving in gvim
  if(has("gui_running"))
    nnoremap <c-s> :update<CR>
    vnoremap <c-s> <c-c>:update<CR>
    inoremap <c-s> <c-o>:update<CR>
  endif

  " Backspace to delete words
  imap <c-backspace> <c-o>:normal dbx<CR>
	nmap <c-backspace> dbx

" # Plugin Configurations and Bindings
	" ## Vim Leader Guide Configuration
	let g:lmap = {}
	
  " Global Copy and Paste
	"noremap <Plug>GlobalPaste "+gP
	"noremap <Plug>GlobalCopy "+y
	let g:lmap.p = ['normal "+gP','Paste']
	let g:lmap.y = ['normal "+y','Copy']


	" Quick Edits
	let g:lmap.e = {
				\'name': 'Quick Edit',
				\'s':['UltiSnipsEdit<CR>', 'Snippets'],
				\'v':['vsplit ' . g:vimrc,'Vimrc'],
				\'l':['vsplit ~/dotfiles/latex/anishs.sty', 'Latex'],
				\'z':['vsplit ~/dotfiles/zsh/zshrc', 'Zsh'],
				\}

	" Quick Source
	nnoremap <leader>sv :"source " . g:vimrc<CR>
	"if(has("win64") || has("win32"))
		"nnoremap <leader>sv :source ~/_vimrc<CR>
	"else
		"nnoremap <leader>sv :source ~/.vimrc<CR>
	"endif
	
	"Git menu
	let g:lmap.g = {
				\'name': 'Git Menu',
				\'s': ['Gstatus', 'Git Status'],
				\'p': ['Gpull', 'Git Pull'],
				\'u': ['Gpush', 'Git Push'],
				\'c': ['Gcommit', 'Git Commit'],
				\'w': ['Gwrite', 'Git Write'],
				\'r': ['Gread', 'Git Read'],
				\}

	let g:lmap.c = {
				\'name': 'Comments',
				\}

	let g:lmap.o = {
				\'name': 'Lists',
				\}
	let g:lmap.o.o = ['copen', 'Quickfix']
	let g:lmap.o.l = ['lopen', 'Locationlist']

	call leaderGuide#register_prefix_descriptions("\\", "g:lmap")
	nnoremap <silent> <leader> :<c-u>LeaderGuide '\'<CR>
	nnoremap <silent> <leader> :<c-u>LeaderGuideVisual '\' <CR>

	augroup AnishsVimLeader
		autocmd!
		autocmd FileType gitcommit noremap <buffer> <leader> <Plug>leaderguide-buffer
		autocmd BufEnter __Tagbar__ noremap <buffer> <leader> <Plug>leaderguide-buffer
		autocmd FileType NERDTreeType noremap <buffer> <leader> <Plug>leaderguide-buffer
	augroup END
	" }}}
  " Ultisnips Configuration {{{
	if has("win64") || has("win32")
		set rtp+=~/vimfiles 
		let g:UltiSnipsSnippetsDir="~/vimfiles/UltiSnips"
	else
		set rtp+=~/.vim
		let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips"
	endif
  let g:UltiSnipsExpandTrigger="<c-j>"
  let g:UltiSnipsJumpForwardTrigger="<c-j>"
  let g:UltiSnipsJumpBackwardTrigger="<c-h>"
  let g:UltiSnipsListSnippets="<c-l>"

  let g:UltiSnipsSnippetsDirectoris=['UltiSnips']
  let g:UltiSnipsEditSplit="horizontal"
	" Enter to expand snippets when possible
	" Does not work with cpp
		let g:ulti_expand_or_jump_res = 0
		function! ExpandSnippetOrCarriageReturn()
			let tmp = UltiSnips#ExpandSnippetOrJump()
			if g:ulti_expand_or_jump_res > 0
				return tmp
			else
				return "\<CR>"
			endif
		endfunc
  inoremap <expr> <CR> "<C-R>=ExpandSnippetOrCarriageReturn()<CR>"
  " # YouCompleteMe Configuration {{{
  let g:ycm_global_extra_conf='~/.ycm_extra_conf.py'
  let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'
	let g:ycm_confirm_extra_conf = 0
  let g:ycm_collect_identifiers_from_tag_files = 1
  let g:ycm_seed_identifier_with_syntax = 1
	let g:ycm_complete_in_comments = 1
	let g:ycm_cache_omnifunc = 0
  if has("win64") || has("win32")
    let g:ycm_server_python_interpreter = 'python'
  else
    let g:ycm_server_python_interpreter = 'python3'
  endif
  if !exists('g:ycm_sematics_triggers')
    let g:ycm_semantic_triggers = {}
  endif
  let g:ycm_semantic_triggers.cpp = ['re!(?=[a-zA-Z0-9_]{3})']
  let g:ycm_semantic_triggers.tex = g:vimtex#re#youcompleteme
	" }}}
  " Gundo Configuration {{{
  let g:gundo_prefer_python3 = 1
  nnoremap <leader>u :GundoToggle<CR>
	" }}}
  " NERDTree Configuration {{{
  let g:NERDTreeQuitOnOpen = 1
  nnoremap <M-\> :NERDTreeToggle<CR>
  inoremap <M-\> <c-o>:NERDTreeToggle<CR>
	" Close if only windows present is NERDTree
	augroup AnishsNerdTree
		autocmd!
		autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
	augroup END
	" }}}
  " Vimtex configuration {{{
  let g:vimtex_enabled = 1
  let g:vimtex_view_automatic = 1
	let g:vimtex_toc_enabled = 1
	let g:vimtex_toc_depth = 1
	let g:vimtex_toc_show_included_files = 1
	let g:vimtex_toc_fold = 1

	" If using deoplete
	"call deoplete#custom#var('omni', 'input_patterns', {
		"\ 'tex': g:vimtex#re#deoplete
		"\})
	
	" LeaderGuide
	let g:lmap.l = {
				\'name': 'Latex',
				\}
	"
	" SumatraPDF config for windows
  if has("win64") || has("win32")
    let g:vimtex_view_general_viewer = 'SumatraPDF.exe'
		let g:vimtex_view_general_options
					\ = ' -forward-search @tex @line @pdf'
					\ . ' -inverse-search "gvim --servername ' . v:servername
					\ . ' --remote-send \"^<C-\^>^<C-n^>'
					\ . ':drop \%f^<CR^>:\%l^<CR^>:normal\! zzzv^<CR^>'
					\ . ':execute ''drop '' . fnameescape(''\%f'')^<CR^>'
					\ . ':\%l^<CR^>:normal\! zzzv^<CR^>'
					\ . ':call remote_foreground('''.v:servername.''')^<CR^>^<CR^>\""' 
  else
    let g:vimtex_view_method = 'zathura'
  endif
	" }}}
  " Airline Configuration {{{
  let g:airline_theme = 'solarized'
  let g:airline_solarized_bg = 'dark'
  let g:airline_powerline_fonts = 1
  let g:airline_inactive_collapse = 0
  let g:airline_skip_empty_sections = 1
  let g:airline#extensions#whitespace#enabled = 0
  
  " Airline symbols
  if !exists('g:airline_symbols')
    let g:airline_symbols ={}
  endif
  let g:airline_symbols.space = "\u3000"
  if has("win64") || has("win32")
    let g:airline_powerline_fonts = 0
    let g:airline_symbols.space = "\u0020"
  endif
	" }}}
  " Solarized Config for Terminal {{{
  let g:solarized_termtrans = 1
  let g:solarized_termcolors = 256
  let g:solarized_contrast = 'normal'
" ## FZF and Ag configuration
	if executable('ag')
		set grepprg=ag\ --vimgrep
		let g:ackprg='ag --vimgrep'
		let g:ctrlp_user_command='ag --vimgrep -g'
	endif
	noremap <c-p> :FZF<CR>
" ## Testing
	"let g:deoplete#enable_at_startup = 1
" ## Foldout
		let g:foldout_save = 1
		
		map <leader>n <Plug>FoldoutNavigation
		let g:lmap.n = ['<Plug>FoldoutNavigation<CR>','Navigation']
" # Functions
  " Update last modified entries
  function! UpdateLastModified()
    " TODO: Delete the update search
    let b:cur_window = winsaveview()
    let b:last_line = line('$')
    if(b:last_line > 20)
      let b:last_line = 20
    endif
    let cmd = "0," . b:last_line . "s/Last \\(Modified\\|Edited\\|Changed\\|Updated\\): \\zs.*/\\=strftime(\"%c\")"
    echo cmd
    execute cmd
    :nohlsearch
    call winrestview(b:cur_window)
  endfunc
" # Autocommands
  augroup Anishs
    autocmd!
		" This is now handled by the viewoptions setting
    " Preserve cursor position on opening the file
    "autocmd BufReadPost *
      "\ if line("'\"") > 0 && line("'\"") <= line("$") |
      "\	  exe "normal! g`\"" |
      "\ endif
    " Update last modified tags at start of the file
    autocmd BufWritePre * silent! call UpdateLastModified() | redraw
    autocmd BufEnter * :nohlsearch
  augroup END
" }}}

" vim:foldmethod=manual:foldlevel=0:nospell
