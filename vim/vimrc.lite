" Author: Anish Sevekari
" Last Updated: Wed 17 Jul 2019 12:33:55 AM DST

set nocompatible

" # vim-plug
  " change installation paths based on os
  if !exists("g:bundle_path")
    if has("win64") || has("win32")
      let g:bundle_path = '~/vimfiles/bundle'
    else
      let g:bundle_path = '~/.vim/bundle'
    endif
  endif

  call plug#begin(bundle_path)
	
  Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle'}
  Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle'}
  Plug 'SirVer/ultisnips'
  Plug 'lervag/vimtex', {'for': 'latex'}
  Plug 'sjl/gundo.vim'
  Plug 'mileszs/ack.vim'
  Plug 'junegunn/fzf', {'do':'./install --bin'}
  Plug 'junegunn/fzf.vim'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-surround'
  Plug 'hecal3/vim-leader-guide'
  Plug 'scrooloose/nerdcommenter'
  Plug 'godlygeek/tabular'
  Plug 'jiangmiao/auto-pairs'

	Plug 'vim-airline/vim-airline'
	Plug 'vim-airline/vim-airline-themes'
	Plug 'altercation/vim-colors-solarized'

	"Plug 'msuperdock/vim-foldout'
  call plug#end()

" # Core Settings
  syntax enable
  set synmaxcol=200
  set encoding=utf-8
  filetype plugin indent on
	" Setting Colorscheme
  if(has("gui_running"))
    set background=dark
    colorscheme solarized
    if has("win64") || has("win32")
      set guifont=Consolas:h12:cANSI
			set visualbell
    else
      set guifont=ubuntu\ Mono\ 12
    endif
  else
    set background=dark
    colorscheme solarized
  endif
	
  set backspace=indent,eol,start
  set ruler " Display cursor position

  " Numbering Settings and functions
  set number
  " Toggle between relative and absolute numbers
  function! RelativeNumber()
	  set number
	  set relativenumber
  endfunc
  function! AbsoluteNumber()
	  set norelativenumber
	  set number
  endfunc
  " Autocommands to toggle between relative and absolute numbering
  augroup AnishsNumber
	  autocmd!
	  autocmd FocusLost * call AbsoluteNumber()
	  autocmd FocusGained * call RelativeNumber()
	  autocmd BufLeave * call AbsoluteNumber()
	  autocmd BufEnter * call RelativeNumber()
	  autocmd InsertEnter * call AbsoluteNumber()
	  autocmd InsertLeave * call RelativeNumber()
  augroup END
  
  set confirm " Exit confirmation
  set wildmenu
  set wildmode=full
  set lazyredraw " Lazy redrawing of screen, force redraw using :redraw
  set showmatch " Highlight matching braces
  set modeline " Enables modlines (File specific vim settings)
  set modelines=1 " Read only the last line for vim specific options
  set autoread " Read changes from outside automatically
  set nomousehide " To fix a bug that causes cursor to dissapear
  set mouse=a
  set textwidth=0 " Textwidth to infinite
  set spelllang=en_us " Set US English for spellchecking
	set nospell
	set viewoptions-=options " Saves folds and cursor

  set updatetime=1000

  let mapleader = "\\"

  " Gui Options
  set guioptions-=L " Remove left scrollbar
  set guioptions-=T " Remove Toolbar
	set guioptions-=m " Remove Menubar


  " Back up directories
  if has("win64") || has("win32")
	set undodir=~/vimfiles/.undo//
	set backupdir=~/vimfiles/.backup//
	set directory=~/vimfiles/.swp//
	set viewdir=~/vimfiles/view//
  else
	set undodir=~/.vim/.undo//
	set backupdir=~/.vim/.backup//
	set directory=~/.vim/.swp//
	set viewdir=~/.vim/view//
  endif
  " # indent settings
  set autoindent
  set smartindent
  set breakindent
  set showbreak=â†³\ 

  set shiftwidth=2
  set softtabstop=2
  set tabstop=2
  set noexpandtab

" # Search settings
  set hlsearch " Highlight searches
  set incsearch " Incremental search (As characters are entered)

" # Fold Settings
  set foldenable
  set foldlevelstart=3
	
" # Plugin Configurations and Bindings
	" ## Vim Leader Guide Configuration
	nnoremap <silent> <leader> :<c-u>LeaderGuide '\'<CR>
	vnoremap <silent> <leader> :<c-u>LeaderGuideVisual '\'<CR>
	let g:lmap = {}
	call leaderGuide#register_prefix_descriptions("\\", "g:lmap")
	
	augroup AnishsVimLeader
		autocmd!
		autocmd FileType gitcommit noremap <buffer> <leader> <Plug>leaderguide-buffer
		autocmd BufEnter __Tagbar__ noremap <buffer> <leader> <Plug>leaderguide-buffer
		autocmd FileType NERDTreeType noremap <buffer> <leader> <Plug>leaderguide-buffer
	augroup END
	
	"Git menu
	let g:lmap.g = {
				\'name': 'Git Menu',
				\'s': ['Gstatus', 'Git Status'],
				\'p': ['Gpull', 'Git Pull'],
				\'u': ['Gpush', 'Git Push'],
				\'c': ['Gcommit', 'Git Commit'],
				\'w': ['Gwrite', 'Git Write'],
				\'r': ['Gread', 'Git Read'],
				\}

	let g:lmap.c = {
				\'name': 'Comments',
				\}

	let g:lmap.o = {
				\'name': 'Lists'
				\}
	let g:lmap.o.o = ['copen', 'Quickfix']
	let g:lmap.o.l = ['lopen', 'Locationlist']


  " ## Ultisnips Configuration
	if has("win64") || has("win32")
		set rtp+=~/vimfiles 
		let g:UltiSnipsSnippetsDir="~/vimfiles/UltiSnips"
	else
		set rtp+=~/.vim
		let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips"
	endif
  let g:UltiSnipsExpandTrigger="<c-space>"
  let g:UltiSnipsJumpForwardTrigger="<tab>"
  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
  let g:UltiSnipsListSnippets="<c-l>"

  let g:UltiSnipsSnippetsDirectoris=['UltiSnips']
  let g:UltiSnipsEditSplit="horizontal"
	" Enter to expand snippets when possible
	" Does not work with cpp
		let g:ulti_expand_or_jump_res = 0
		function! ExpandSnippetOrCarriageReturn()
			let tmp = UltiSnips#ExpandSnippetOrJump()
			if g:ulti_expand_or_jump_res > 0
				return tmp
			else
				return "\<CR>"
			endif
		endfunc
  inoremap <expr> <CR> "<C-R>=ExpandSnippetOrCarriageReturn()<CR>"

  " ## Gundo Configuration
  let g:gundo_prefer_python3 = 1
  nnoremap <leader>u :GundoToggle<CR>

  " ## NERDTree Configuration
  let g:NERDTreeQuitOnOpen = 1
  nnoremap <M-\> :NERDTreeToggle<CR>
  inoremap <M-\> <c-o>:NERDTreeToggle<CR>
	" Close if only windows present is NERDTree
	augroup AnishsNerdTree
		autocmd!
		autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
	augroup END

  " ## Vimtex configuration
  let g:vimtex_enabled = 1
  let g:vimtex_view_automatic = 1
	let g:vimtex_toc_enabled = 1
	let g:vimtex_toc_depth = 1
	let g:vimtex_toc_show_included_files = 1
	let g:vimtex_toc_fold = 1

	" LeaderGuide
	let g:lmap.l = {
				\'name': 'Latex',
				\}

	" SumatraPDF config for windows
  if has("win64") || has("win32")
		let g:vimtex_view_general_viewer = 'SumatraPDF.exe'
		let g:vimtex_view_general_options
					\ = ' -forward-search @tex @line @pdf'
					\ . ' -inverse-search "gvim.exe --servername ' . v:servername
					\ . ' --remote-send \"^<C-\^>^<C-n^>'
					\ . ':drop \%f^<CR^>:\%l^<CR^>:normal\! zzzv^<CR^>'
					\ . ':execute ''drop '' . fnameescape(''\%f'')^<CR^>'
					\ . ':\%l^<CR^>:normal\! zzzv^<CR^>'
					\ . ':call remote_foreground('''.v:servername.''')^<CR^>^<CR^>\""' 
  else
		let g:vimtex_view_general_viewer = 'zathura'
    let g:vimtex_view_method = 'zathura'
  endif
	
  " ## Airline Configuration
  let g:airline_theme = 'solarized'
  let g:airline_solarized_bg = 'dark'
  let g:airline_powerline_fonts = 1
  let g:airline_inactive_collapse = 0
  let g:airline_skip_empty_sections = 1
  let g:airline#extensions#whitespace#enabled = 1
	let g:airline#extensions#tabline#enabled = 1
  
  " ## Solarized Config for Terminal {{{
  let g:solarized_termtrans = 1
  let g:solarized_termcolors = 256
  let g:solarized_contrast = 'normal'

	" ## FZF and Ag configuration
	if executable('ag')
		set grepprg=ag\ --vimgrep
		let g:ackprg='ag --vimgrep'
		let g:ctrlp_user_command='ag --vimgrep -g'
	endif
	noremap <c-p> :FZF<CR>

	" ## Foldout
		let g:foldout_save = 1
		
		map <leader>n <Plug>FoldoutNavigation
		let g:lmap.n = ['<Plug>FoldoutNavigation<CR>','Navigation']

" # Generic Bindings and Shortcuts
  nnoremap :W :w
  nnoremap :Q :q
	nnoremap -d dd
	nnoremap -c ddO

	" Movements
  nnoremap j gj
  nnoremap k gk
  vnoremap j gj
  vnoremap k gk

  " Hotkeys for saving in gvim
  if(has("gui_running"))
    nnoremap <c-s> :update<CR>
    vnoremap <c-s> <c-c>:update<CR>
    inoremap <c-s> <c-o>:update<CR>
  endif

  " Backspace to delete words
  imap <c-backspace> <c-o>:normal dbx<CR>
	nmap <c-backspace> dbx


	" Global Copy and Paste 
	let g:lmap.p = [ 'call feedkeys("\"+gP")', 'Paste']
	let g:lmap.y = [ 'call feedkeys("\"+y")', 'Copy' ]
	

	" Quick Edits
	let g:lmap.e = {
				\'name': 'Quick Edit',
				\'s':['UltiSnipsEdit', 'Snippets'],
				\'v':['vsplit ~/.vimrc', 'Vimrc'],
				\'l':['vsplit ~/dotfiles/latex/anishs.sty', 'Latex'],
				\'z':['vsplit ~/dotfiles/zsh/zshrc', 'Zsh'],
				\}

	" Remove Search Highlight
	nmap <leader>h :nohlsearch<CR>
	let g:lmap.h = ['nohlsearch', 'Highlight']

	" Quick Source
	if(has("win64") || has("win32"))
		nnoremap sv :source ~/_vimrc<CR>
	else
		nnoremap sv :source ~/.vimrc<CR>
	endif
	

" # Functions
  " Update last modified entries
  function! UpdateLastModified()
    " TODO: Delete the update search
    let b:cur_window = winsaveview()
    let b:last_line = line('$')
    if(b:last_line > 20)
      let b:last_line = 20
    endif
    let cmd = "0," . b:last_line . "s/Last \\(Modified\\|Edited\\|Changed\\|Updated\\): \\zs.*/\\=strftime(\"%c\")"
    echo cmd
    execute cmd
    :nohlsearch
    call winrestview(b:cur_window)
  endfunc

" # Autocommands
  augroup Anishs
    autocmd!
		"foldouts handles view calls
		"autocmd BufWritePost,BufLeave,WinLeave ?* mkview
		"autocmd BufReadPre ?* silent loadview
    " Update last modified tags at start of the file
    autocmd BufWritePre * silent! call UpdateLastModified() | redraw
    autocmd BufEnter * :nohlsearch
  augroup END

