# # Templates {{{
snippet code "Main template" b
#include<iostream>
#include<iomanip>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
#include<cassert>
#include<ctime>
#include<cwctype>
#include<chrono>
#include<random>

#include<cstring>
#include<vector>
#include<queue>
#include<set>
#include<map>
#include<unordered_set>
#include<unordered_map>
#include<bitset>

#include<cmath>
#include<complex>

using namespace std;
#define szof(x) ((int) x.size())

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	$0
}
endsnippet
snippet temp "Basic Template" b
#include<bits/stdc++.h>
using namespace std;

int main() {
	$0
}
endsnippet
snippet freopen "freopen line" b
freopen("${1:in}", "r", stdin); freopen("${2:out}", "w", stdout);
$0
endsnippet
snippet ios "optimized ios" b
ios_base::sync_with_stdio(false);
cin.tie(nullptr);
$0
endsnippet
snippet infi "infinity" b
const int ${1:inf} = 1 << 30;
endsnippet
snippet infl "infinity" b
const long long ${1:inf} = 1ll << 62;
endsnippet
snippet testcases "Testcases" b
int T; cin >> T;
for(int tt = 0; tt < T; ++tt) {
	$0
}
endsnippet
snippet google "Google output" b
int T; cin >> T;
for(int tt = 0; tt < T; ++tt) {
	$0
	cout << "Case #" << tt + 1 << ": " << $1 << endl;
}
endsnippet
snippet yesno "Yes no output" b
cout << (${1:ok} ? "YES" : "NO") << endl;
endsnippet
# }}}
# # Common functions {{{
snippet forg  "General for loop"
for(${1:int} ${2:i} = ${4:0} ; $2 < ${5:n}; ${6:++$2})
endsnippet
snippet for "Basic for loop" 
for(int ${1:i} = 0; $1 < ${2:n}; ++$1)
endsnippet
snippet fori "Incremental for loop"
for(int ${1:i} = ${2:a}; $1 < ${3:b}; ++$1)
endsnippet
snippet ford "Decreasing for loop"
for(int ${1:i} = ${2:n-1}; $1 >= ${3:0}; --$1)
endsnippet
snippet trans "Transversal"
for(${1:auto} ${2:a} : ${3:set})
endsnippet
snippet imax "Inplace max" b
inline void imax(${1:int} &a, $1 b) {a = max(a,b);}
inline void imin($1 &a, $1 b) {a = min(a,b);}
endsnippet
# }}}
# # Number Theory {{{
snippet miller_rabin "Miller Rabin Primality Test" b
bool miller_rabin(${1:int} p) {
	$1 s = 0; $1 r = p-1;
	while(! (r % 2)) s++, r /= 2;
	int l[9] = {2,3,5,7,11,13,17,19,23}; // add 29,31,37 for long long
	for(int i = 0 ; i < 9; ++i) {
		$1 a = l[i];
		if(a == p) continue;
		$1 y = pow(a, r, p);
		if(y != 1 && y != p-1) {
			for(int j = 0 ; j < s; ++j) {
				y = mul(y,y,p);
				if( y == p-1) break;
			if( y == 1) return false;
			}
			if(y != p-1) return false;
		}
	}
	return true;
}
endsnippet
snippet mod1 "mod value 1"
1000000007
endsnippet
snippet mod2 "mod value 2"
998244353
endsnippet
snippet modg "Global mod functions" b
const ${1:int} ${2:mod} = ${3:1000000007};
inline $1 sum($1 a, $1 b) { return ($1) ((a + b) % $2); }
inline $1 sub($1 a, $1 b) { return ($1) ((a -= b) % $2 < 0 ) ? a + $2 : a; }
inline $1 mul($1 a, $1 b) { return ($1) ((1ll * a * b) % $2); }
$1 pow($1 x, $1 a) {
	if(a == 0) return 1;
	$1 ret = pow(x, a/2);
	ret = mul(ret, ret);
	if(a & 1) ret = mul(x, ret);
	return ret;
}
$1 inv($1 x) {
	return pow(x, $2 - 2);
}
$0
endsnippet
snippet modf "mod functions" b
inline ${1:int} sum($1 a, $1 b, $1 mod) { return ($1) ((a + b) % mod); }
inline $1 sub($1 a, $1 b, $1 mod) {return ($1) ((a -= b) % mod < 0 ) ? a + mod : a; }
inline $1 mul($1 a, $1 b, $1 mod) { return ($1) ((1ll * a * b) % mod); }
$1 pow($1 x, $1 a, $1 mod) {
	if(a == 0) return 1;
	$1 ret = pow(x, a/2, mod);
	ret = mul(ret, ret, mod);
	if(a & 1) ret = mul(x, ret, mod);
	return ret;
}
$1 inv($1 x, $1 mod) {
	return pow(x, mod - 2, mod);
}
$0
endsnippet
# modular class copied from Benq
snippet modular "modular class" b
/**
 * Description: modular arithmetic operations
 * Source: Benq modular template
 * Testing: Tested - problem url here
 */
const int ${1:MOD} = ${2:1000000007};
const int ${3:RT} =  ${4:5}; // 5 is primitive root for common mods
struct modular {
	long long val;
	explicit operator int() const { return val; }
	modular() { val = 0; }
	modular(const long long & v) {
		val = (-$1 <= v && v <= $1) ? v : v % $1;
		if (val < 0) val += $1;
	}

	friend ostream& operator<<(ostream& os, const modular& a) { return os << a.val; }
	friend istream& operator>>(istream& in, modular& a) { return in >> a.val; }
	friend bool operator==(const modular& a, const modular& b) { return a.val == b.val; }
	friend bool operator!=(const modular& a, const modular& b) { return !(a == b); }
	friend bool operator<(const modular& a, const modular& b) { return a.val < b.val; }

	modular operator-() const { return modular(-val); }
	modular& operator+=(const modular& m) { if ((val += m.val) >= $1) val -= $1; return *this; }
	modular& operator-=(const modular& m) { if ((val -= m.val) < 0) val += $1; return *this; }
	modular& operator*=(const modular& m) { val = (long long)val*m.val%$1; return *this; }
	friend modular pow(modular a, long long p) {
		modular ans = 1; for (; p; p /= 2, a *= a) if (p&1) ans *= a;
		return ans;
	}
	friend modular inv(const modular& a) { return pow(a, $1 - 2); } 
	modular& operator/=(const modular& m) { return (*this) *= inv(m); }

	friend modular operator+(modular a, const modular& b) { return a += b; }
	friend modular operator-(modular a, const modular& b) { return a -= b; }
	friend modular operator*(modular a, const modular& b) { return a *= b; }

	friend modular operator/(modular a, const modular& b) { return a /= b; }	
};
endsnippet
snippet gcd "Euclid's Algorithm" b
${1:long long} gcd($1 a, $1 b) {
	if(b == 0) return a;
	else return gcd(b, a % b);
}
$0
endsnippet
snippet euclid "Extended Euclid's Algorithm" b
${1:long long} euclid($1 a, $1 b, $1 &x, $1 &y){
	if(b == 0){
		x = 1, y = 0;
		return a;
	}
	$1 d = euclid(b, a % b, y, x);
	y -= x * (a / b);
	return d;
}
$0
endsnippet
snippet frac "Fraction Functions" b
inline pair<${1:int},$1> sum(pair<$1,$1> a, pair<$1,$1>b) {
	return make_pair(
			sum(mul(a.first, b.second), mul(a.second, b.first)),
			mul(a.second, b.second)
			);
}
inline pair<$1,$1> mul(pair<$1,$1> a, pair<$1,$1> b) {
	return make_pair(
			mul(a.first, b.first),
			mul(a.second, b.second)
			);
}
inline pair<$1,$1> sub(pair<$1,$1> a, pair<$1, $1>b) {
	return make_pair(
			sum(mul(a.first, b.second), - mul(a.second, b.first)),
			mul(a.second, b.second)
			);
}
endsnippet
# }}}
# # Graphs {{{
# matchings
snippet kuhn "Kuhn's algorithm" b
// Returns lexicographically smallest matching in L
// Runtime O(l*E)
// Tested : https://codeforces.com/contest/1728/problem/F
struct kuhn {
	int l,r;
	vector<vector<int>> edges;
	vector<int> matching;
	vector<bool> used;

	kuhn() {};
	kuhn(int l, int r): l(l), r(r) {
		edges.resize(l);
		used.resize(l,false);
		matching.resize(r,-1);
	}

	bool try_kuhn(int v){
		if(used[v]) return false;
		used[v] = true;
		for(int u : edges[v])
			if(matching[u] == -1 || try_kuhn(matching[u])){
				matching[u] = v;
				return true;
			}
		return false;
	}

	void find_matching(){
		used.assign(l,false);
		for(int i = 0; i < l; i++){
			if(try_kuhn(i)){
				used.assign(l,false);
			}
		}
	}
};
endsnippet
# flows
snippet dinic "Dinics algorithm" b
// Untested
template<typename T>
struct dinic {
	struct edge {
		int u, rev;
		T cap, flow = 0;
		edge(int u, int rev, T cap, T flow = 0): u(u), rev(rev), cap(cap), flow(flow) {};
	};
	
	int n, s, t;
	T flow;
	vector<int> lst;
	vector<int> d;
	vector<vector<edge>> g;

	// to use the scaling trick to optimize flow computation
	T scaling_lim;
	bool scaling;

	dinic() {};
	dinic(int n, int s, int t, bool scaling = false): n(n), s(s), t(t), scaling(scaling) {
		g.resize(n);
		d.resize(n);
		lst.resize(n);
		flow = 0;
	}

	void add_edge(int v, int u, int cap, bool directed = true) {
		g[v].emplace_back(u, szof(g[u]), cap);
		g[u].emplace_back(v, szof(g[v]) - 1, directed ? 0 : cap);
	}

	T dfs(int v, T flow) {
		if(v == t) return flow;
		if(flow == 0) return 0;
		T ret = 0;
		for(;lst[v] < szof(g[v]); ++lst[v]) {
			edge& e = g[v][lst[v]];
			if(d[e.u] != d[v] + 1) continue;
			T add = dfs(e.u, min(flow, e.cap - e.flow));
			if(add > 0) {
				ret += add;
				flow -= add;
				e.flow += add;
				g[e.u][e.rev].flow -= add;
			}
			if (flow == 0) break;
		}
		return ret;
	}

	bool bfs() {
		fill(d.begin(), d.end(), -1);
		queue<int> q;
		q.push(s);
		d[s] = 0;
		while(!q.empty() && d[t] == -1) {
			int v = q.front(); q.pop();
			for(edge& e : g[v]) {
				if(d[e.u] == -1 && e.cap - e.flow >= scaling_lim) {
					q.push(e.u);
					d[e.u] = d[v] + 1;
				}
			}
		}
		return d[t] != -1;
	}

	T calc() {
		T max_lim = numeric_limits<T>::max() / 2 + 1;
		for(scaling_lim = scaling ? max_lim : 1; scaling_lim > 0; scaling_lim >>= 1) {
			while(bfs()) {
				fill(lst.begin(), lst.end(), 0);
				T add;
				while((add = dfs(s,numeric_limits<T>::max())) > 0) flow += add;
			}
		}
		return flow;
	}
};
endsnippet
snippet push_relabel "Push relabel" b
template<typename T>
struct push_relabel {
	const T inf = numeric_limits<T>::max();
	struct edge {
		int u, rev;
		T cap, flow = 0;
		edge(int u, int rev, T cap, T flow = 0): u(u), rev(rev), cap(cap), flow(flow) {};
	};

	int n;
	vector<int> count, dist;
	vector<T> excess;
	int b = 0;
	vector<bool> active;
	vector<vector<edge>> g;
	vector<vector<int>> B;

	push_relabel() {};
	push_relabel(int n): n(n) {
		count.resize(2 * n + 1,0);
		dist.resize(n,0);
		active.resize(n,0);
		excess.resize(n,0);
		g.resize(n);
		B.resize(2 * n + 1);
	}

	void add_edge(int v, int u, T cap, bool directed = true) {
		edge a(u, szof(g[u]), cap), b(v, szof(g[v]), directed ? 0 : cap);
		g[v].push_back(a), g[u].push_back(b);
	}

	void enqueue(int v) {
		if(!active[v] && excess[v] > 0 && dist[v] < n) {
			active[v] = 1;
			B[dist[v]].push_back(v);
			b = max(b, dist[v]);
		}
	}

	void push(int v, edge& e) {
		T d = min(excess[v], e.cap - e.flow);
		if(dist[v] == dist[e.u] + 1 && d > 0) {
			e.flow += d, g[e.u][e.rev].flow -= d;
			excess[e.u] += d, excess[v] -= d;
			enqueue(e.u);
		}
	}

	void relabel(int v) {
		count[dist[v]]--; dist[v] = 2 * n;
		for(edge& e : g[v]) if(e.cap > e.flow) dist[v] = min(dist[v], dist[e.u] + 1);
		count[dist[v]]++;
		enqueue(v);
	}

	void discharge(int v) {
		for(edge& e : g[v]) {
			if(excess[v] > 0) push(v,e);
			else break;
		}
		if(excess[v] > 0) {
			relabel(v);
		}
	}

	T max_flow(int s, int t) {
		for(edge& e : g[s]) excess[s] += e.cap;
		count[0] = n;
		enqueue(s); active[t] = 1;

		while(b >= 0) {
			if(szof(B[b])) {
				int v = B[b].back(); B[b].pop_back();
				active[v] = 0; discharge(v);
			}
			else b--;
		}
		return excess[t];
	}

};
endsnippet
snippet push_relabel_gap "Push relabel algorithm - gap heuristic" b
template<typename T>
struct push_relabel {
	const T inf = numeric_limits<T>::max();
	struct edge {
		int u, rev;
		T cap, flow = 0;
		edge(int u, int rev, T cap, T flow = 0): u(u), rev(rev), cap(cap), flow(flow) {};
	};

	int n;
	vector<int> count, dist;
	vector<T> excess;
	int b = 0;
	vector<bool> active;
	vector<vector<edge>> g;
	vector<vector<int>> B;

	push_relabel() {};
	push_relabel(int n): n(n) {
		count.resize(n+1,0);
		dist.resize(n,0);
		active.resize(n,0);
		excess.resize(n,0);
		g.resize(n);
		B.resize(2 * n + 1);
	}

	void add_edge(int v, int u, T cap, bool directed = true) {
		edge a(u, szof(g[u]), cap), b(v, szof(g[v]), directed ? 0 : cap);
		g[v].push_back(a), g[u].push_back(b);
	}

	void enqueue(int v) {
		if(!active[v] && excess[v] > 0 && dist[v] < n) {
			active[v] = 1;
			B[dist[v]].push_back(v);
			b = max(b, dist[v]);
		}
	}

	void push(int v, edge& e) {
		T d = min(excess[v], e.cap - e.flow);
		if(dist[v] == dist[e.u] + 1 && d > 0) {
			e.flow += d, g[e.u][e.rev].flow -= d;
			excess[e.u] += d, excess[v] -= d;
			enqueue(e.u);
		}
	}

	// gap heuristic
	void gap(int k) {
		for(int v = 0; v < n; ++v) if(dist[v] >= k) {
			count[dist[v]]--;
			dist[v] = n;
			count[dist[v]]++;
			enqueue(v);
		}
	}

	void relabel(int v) {
		count[dist[v]]--; dist[v] = 2 * n;
		for(edge& e : g[v]) if(e.cap > e.flow) dist[v] = min(dist[v], dist[e.u] + 1);
		count[dist[v]]++;
		enqueue(v);
	}

	void discharge(int v) {
		for(edge& e : g[v]) {
			if(excess[v] > 0) push(v,e);
			else break;
		}
		if(excess[v] > 0) {
			if(count[dist[v]] == 1) gap(dist[v]);
			else relabel(v);
		}
	}

	T max_flow(int s, int t) {
		for(edge& e : g[s]) excess[s] += e.cap;
		count[0] = n;
		enqueue(s); active[t] = 1;

		while(b >= 0) {
			if(szof(B[b])) {
				int v = B[b].back(); B[b].pop_back();
				active[v] = 0; discharge(v);
			}
			else b--;
		}
		return excess[t];
	}

};
endsnippet
snippet floyd-warshall "All pairs shortest paths" b
// setup initial values to be edge weights.
for(int k = 0; k < n; ++k) {
	for(int i = 0; i < n; ++i) for(int j = 0; j < n; ++j) {
		${1:sp}[i][j] = min($1[i][j], $1[i][k] + $1[k][j]);
	}
}
endsnippet
# }}}
# # Combinatorics {{{
snippet binom "fast binom" b
modular fac[${1:N}];
modular fac_inv[$1];

void fac_pre() {
	fac[0] = 1;
	for(int i = 1; i < $1; ++i) fac[i] = fac[i-1] * i, fac_inv[i] = inv(fac[i]);
}
modular binom(int n, int k) {
	if(k == 0) return 1;
	if(n == k) return 1;
	return fac[n] * fac_inv[k] * fac_inv[n-k];
}
endsnippet
snippet nth_perm "nth permutation" b
void ${3:factorial_pre}() {
	${1:factorial}[0] = 1;
	for(int i = 1; i < 20; ++i) {
		$1[i] = i * $1[i-1];
	}
}

void ${4:nth_perm}(long long xx, int n) {
	long long x = xx;
	int i = 0;
	while($1[i] <= xx) i++;
	int ff[i];
	for(int j = 0; j < i; ++j) {
		ff[j] = x % (j + 1);
		x = x / (j + 1);
	}
	int used[i];
	for(int j = 0; j < i; ++j) used[j] = 1;
	for(int j = i-1; j >= 0; --j) {
		int sum = 0, k = 0;
		while(sum < ff[j]+1) sum += used[k++];
		used[k-1] = 0;
		${2:perm}[n-1-j] = k + n - i;
	}
}
$0
endsnippet
# }}}
# # Geometry {{{
snippet 3dvec "3D vectors" b
// 3d vector (can degenerate to 2d when z=0)
#define T ${1:long double}
struct vec {
	T x,y,z;	//coordinates/data
	vec(T xx, T yy, T zz=0.) { x=xx;y=yy;z=zz; }
	vec() { x=y=z=0;}

	// vector ops
	vec& operator=(const vec& b) { x=b.x; y=b.y; z=b.z; return *this; }
	vec operator+(const vec& b) const { return vec(x+b.x, y+b.y, z+b.z); }
	vec operator-(const vec& b) const { return vec(x-b.x, y-b.y, z-b.z); }
	T operator*(const vec& b) const { return x*b.x + y*b.y + z*b.z; }
	vec operator^(const vec& b) const { return vec(y*b.z - z*b.y,
												   z*b.x - x*b.z,
												   x*b.y - y*b.x); }
	// scalar mult
	vec operator*(T k) const { return vec(x*k,y*k,z*k); }
	vec operator/(T k) const { return vec(x/k,y/k,z/k); }
	vec operator-() const { return vec(-x,-y,-z); }  // negation
	
	T sqlen() const { return (*this) * (*this); }

	bool operator<(const vec& other) const {
		if (x < other.x) return true;
		if (x > other.x) return false;
		if (y < other.y) return true;
		if (y > other.y) return false;
		if (z < other.z) return true;
		if (z > other.z) return false;
		return false;
	}
};
vec operator*(T k, vec v) { return v*k; }
ostream& operator<<(ostream& out, const vec& v) {
	return out << "(" << v.x << "," << v.y << "," << v.z <<")";
}
#undef T
endsnippet
snippet vector "Vector template" b
template<class T> struct vec {
	int n;
	vector<T> d;
	vec(int _n) : n(_n) {d = vector<T>(n);}
	vec() : vec(0) {}
	int operator*(const vec& v) {
		assert(n == v.n);
		int ret = 0;
		for(int i = 0; i < n; ++i) ret += d[i] * v.d[i];
		return ret;
	}
	vec& operator +=(const vec& v) {
		assert(n == v.n);
		for(int i = 0; i < n; ++i) d[i] += v.d[i];
		return *this;
	}
	vec& operator-=(const vec& v) {
		assert(n == v.n);
		for(int i = 0; i < n; ++i) d[i] -= v.d[i];
		return *this;
	}
	vec operator +(const vec& v) { return vec(*this)+=v; }
	vec operator -(const vec& v) { return vec(*this)-=v; }
};
endsnippet
snippet pointi "Point template int" b
struct point{
	int x,y;
	point(int x,int y): x(x), y(y) {}
	point() : point(0,0) {}
	point(const point& a): x(a.x), y(a.y) {}

	friend ostream& operator<<(ostream& os, const point& a) { return os << a.x << " " << a.y; }
	friend istream& operator>>(istream& in, point& a) { return in >> a.x >> a.y; }
	friend bool operator==(const point& a, const point& b) {
		return (a.x == b.x && a.y == b.y);
	}
	friend bool operator<(point a, point b) { if(a.x == b.x) return a.y < b.y; else return a.x < b.x; }

	point& operator*=(int v) { x *= v; y *= v; return *this; }
	point& operator/=(int v) { x /= v; y /= v; return *this; }
	point operator-() { return point(-x,-y); }
	point& operator+=(const point& a) { x+=a.x; y-=a.y; return *this; }
	point& operator-=(const point& a) { x-=a.x; y-=a.y; return *this; }
	friend point operator*(point a, int v) { return a*=v; }
	friend point operator/(point a, int v) { return a/=v; }
	friend point operator+(point a, point b) { return a+=b; }
	friend point operator-(point a, point b) { return a-=b; }
};

long long dot(const point &a, const point &b) {
	return 1ll * a.x * b.x + 1ll * a.y * b.y;
}
endsnippet
snippet pointd "Point template double" b
double eps = ${1:1e-6};
struct point{
	double x,y;
	point(double x,double y): x(x), y(y) {}
	point() : point(0,0) {}
	point(const point& a): x(a.x), y(a.y) {}

	friend ostream& operator<<(ostream& os, const point& a) { return os << a.x << " " << a.y; }
	friend istream& operator>>(istream& in, point& a) { return in >> a.x >> a.y; }
	friend bool operator==(const point& a, const point& b) {
		return (-eps < a.x - b.x && a.x - b.x < eps && -eps < a.y - b.y && a.y - b.y < eps);
	}
	friend bool operator<(point a, point b) { if(a.x == b.x) return a.y < b.y; else return a.x < b.x; }

	point& operator*=(double v) { x *= v; y *= v; return *this; }
	point& operator/=(double v) { x /= v; y /= v; return *this; }
	point operator-() { return point(-x,-y); }
	point& operator+=(const point& a) { x+=a.x; y-=a.y; return *this; }
	point& operator-=(const point& a) { x-=a.x; y-=a.y; return *this; }
	friend point operator*(point a, double v) { return a*=v; }
	friend point operator/(point a, double v) { return a/=v; }
	friend point operator+(point a, point b) { return a+=b; }
	friend point operator-(point a, point b) { return a-=b; }
};

double dot(const point &a, const point &b) {
	return a.x * b.x + a.y * b.y;
}
endsnippet
# }}}
# # String {{{
snippet buildz "z function" b
inline void buildZ(char* s, int* z) {
	// Computes Z function (common-prefix)
	// tested
	int n = strlen(s);
	for(int i = 1, l = 0, r = 0; i < n; ++i) {
		if(i<=r) z[i] = (z[i-l] < r-i+1 ? z[i-l] : r-i+1 );
		while(i + z[i] < n and s[z[i]] == s[i+z[i]]) ++z[i];
		if(i + z[i] - 1 > r) l=i, r=i+z[i]-1;
	}
}
endsnippet
snippet aho_corasick_struct "aho_corasick struct" b
struct ${1:aho_corasick} {
	struct node {
		map<int, int> next, go;
		int p, pch;
		bool term;
		int suf;

		node() {
			next.clear(); go.clear();
			term = false;
			p = -1, pch = -1;
			suf = -1;
		}
	};

	vector<node> nodes;

	$1() {
		nodes = vector<node>(1, node());
	}
	int add(const string& s) {
		int v = 0;
		for(char cc : s) {
			int c = cc - 'a';
			if(nodes[v].next.count(c) == 0) {
				nodes[v].next[c] = szof(nodes);
				nodes.emplace_back();
				nodes.back().p = v;
				nodes.back().pch = c;
			}
			v = nodes[v].next[c];
		}
		nodes[v].term = true;
		return v;
	}
	int go(int v, char cc) {return go(v, cc - 'a');}
	int go(int v, int c) {
		if(nodes[v].go.count(c)) return nodes[v].go[c];
		if(nodes[v].next.count(c)) return nodes[v].go[c] = nodes[v].next[c];
		else return nodes[v].go[c] = (v == 0 ? 0 : go(suf(v),c));
	}
	int suf(int v) {
		if(nodes[v].suf != -1) return nodes[v].suf;
		if(v == 0 || nodes[v].p == 0) return nodes[v].suf = 0;
		return nodes[v].suf = go(suf(nodes[v].p), nodes[v].pch);
	}
	int feed(const string &s) {
		int v = 0;
		for(char cc : s) {
			v = go(v,cc);
			${0://main works goes here}
		}
	}
};
endsnippet
# }}}
# # Data Structures {{{
snippet segtree "Segment tree" b
${1:int} ${2:seg}[4 * ${3:N}];
$1 ${4:query}(int l, int r) {
	// query range l <= x < r
	l += $3, r+= $3;
	$1 ans = 0;
	while(l < r) {
		if( l & 1 ) ans += $2[l++]; //l++
		if( r & 1 ) ans += $2[--r]; //--r
		l >>= 1 , r >>= 1;
	}
	return ans;
}
void ${5:update}(int i, $1 val) {
	i += $3; // can be replaced by actual upperbound
	$2[i] = val; i >>= 1;
	while(i > 0) {
		$2[i] = $2[2 * i] + $2[2 * i + 1];
		i >>= 1;
	}
}
void ${6:fill}() {for(int i=0; i < 4 * N; ++i) $2[i] = 0;}
endsnippet
snippet segtree_struct "Segment tree stuct" b
/* Segtree struct template
 * todo: switch to 0 indexing at some point
 */

struct segtree{
	struct node{
		int val = 0;

		node() {};
		void modify(int v){
			val = v;
		}
		void unite(const node &a, const node &b) {
			val = a.val + b.val;
		}
	};

	node unite(const node &a, const node &b) const {
		node ret;
		ret.unite(a,b);
		return ret;
	}

	int n;
	vector<node> tree;

	LCA(int n): n(n), tree(n << 2, node()) {}

	inline void pull(int p) {
		tree[p].unite(tree[p << 1], tree[(p << 1) + 1]);
	}

	void build(int p, int l, int r, const vector<int> &v) {
		// build range l <= x <= r
		if( l == r - 1 ) {
			if(l < szof(v)) tree[p].modify(v[l]);
			return;
		}
		int m = (l + r) >> 1;
		build(p << 1, l, m, v);
		build((p << 1) + 1, m, r, v);
		pull(p);
	}

	//query and modify need to be top down to ensure updates go through.	

	void modify(int p, int l, int r, int pos, int v) {
		// modifies range l <= x < r
		if(pos <= l && r <= pos + 1) {
			tree[p].modify(v);
			return;
		}
		int m = (l + r) >> 1;
		if(pos < m) modify(p << 1, l, m, pos, v);
		if(pos + 1 > m) modify((p << 1) + 1, m, r, pos, v);
		pull(p);
	}

	node query(int p, int l, int r, int ll, int rr) {
		// query range l <= x < r
		if(ll <= l && r <= rr) return tree[p];
		int m = (l + r) >> 1;
		node ret;
		if(ll < m && rr > m) ret = unite(query(p << 1, l, m, ll, rr), query((p << 1) + 1, m, r, ll, rr));
		else if(ll < m) ret = query(p << 1, l, m, ll, rr);
		else if(rr > m) ret = query((p << 1) + 1, m, r, ll, rr);
		pull(p);
		return ret;
	}

	inline void build(int p, int l, int r) {build(p,l,r, vector<int>());}
	inline void build(int l, int r) {build(1,l,r);}
	inline void modify(int pos, int v) {modify(1,0,n,pos,v);}
	inline node query(int l, int r) {return query(1,0,n,l,r);}
	inline node get(int i) {return query(i,i+1);}
};
endsnippet
snippet segtree_struct_lazy "Lazy segment tree struct" b
/* Segtree struct template + lazy variant
 * copied from tourist
 * todo: switch to 0 indexing at some point.
 */

struct segtree{
	struct node{
		${1:int} sum = 0;
		${2:$1} tag = 0;
		bool put = false;

		node() {};
		node($1 sum): sum(sum) {};

		void modify(int l, int r, ${3:$1} v) {
			// update range l <= x < r
			${4:sum = (r - l) * v;
			tag = v;
			put = true;}
		}

		void unite(const node &a, const node &b) {
			${5:sum = a.sum + b.sum;}
		}
	};

	node unite(const node &a, const node &b) const {
		node ret;
		ret.unite(a,b);
		return ret;
	}

	int n;
	vector<node> tree;

	segtree(int n): n(n), tree(n << 2, node(0)) {}
	segtree(int n, $1 val): n(n), tree(n << 2,node(val)) {}

	inline void pull(int p) {
		tree[p].unite(tree[p << 1], tree[(p << 1) + 1]);
	}

	inline void push(int p, int l, int r) {
		int m = (l + r) >> 1;
		if(tree[p].put) {
			tree[p << 1].modify(l, m, tree[p].tag);
			tree[(p << 1) + 1].modify(m, r, tree[p].tag);
			tree[p].put = false;
		}
	}

	void build(int p, int l, int r, const vector<${6:$1}> &v) {
		// build range l <= x <= r
		if( l == r - 1 ) {
			if(l < szof(v)) tree[p].modify(l,r,v[l]);
			return;
		}
		int m = (l + r) >> 1;
		build(p << 1, l, m, v);
		build((p << 1) + 1, m, r, v);
		pull(p);
	}

	//query and modify need to be top down to ensure updates go through.	

	void modify(int p, int l, int r, int ll, int rr, ${7:$1} v) {
		// modifies range l <= x < r
		if(ll <= l && r <= rr) {
			tree[p].modify(l,r,v);
			return;
		}
		int m = (l + r) >> 1;
		push(p, l, r);
		if(ll < m) modify(p << 1, l, m, ll, rr, v);
		if(rr > m) modify((p << 1) + 1, m, r, ll, rr, v);
		pull(p);
	}

	node query(int p, int l, int r, int ll, int rr) {
		// query range l <= x < r
		if(ll <= l && r <= rr) return tree[p];
		int m = (l + r) >> 1;
		push(p, l, r);
		node ret;
		if(ll < m && rr > m) ret = unite(query(p << 1, l, m, ll, rr), query((p << 1) + 1, m, r, ll, rr));
		else if(ll < m) ret = query(p << 1, l, m, ll, rr);
		else if(rr > m) ret = query((p << 1) + 1, m, r, ll, rr);
		pull(p);
		return ret;
	}

	inline void build(int p, int l, int r) {build(p,l,r, vector<int>());}
	inline void build(int l, int r) {build(1,l,r);}
	inline void modify(int l, int r, ${8:$1} v) {modify(1,0,n,l,r,v);}
	inline node query(int l, int r) {return query(1,0,n,l,r);}
	inline node get(int i) {return query(i,i+1);}
};
endsnippet
snippet segtree_func "Inside function segment tree" b
${1:int} ${2:seg}[4 * ${3:N}];
function<$1(int,int)> ${5:query} = [&](int l, int r) {
	l += $3, r+= $3; //can be replace by actual upperbound
	$1 ans = ${4:0};
	while(l < r) {
		if( l & 1 ) ans += $2[l++];
		if( r & 1 ) ans += $2[--r];
		l >>= 1 , r >>= 1;
	}
	return ans;
};
function<void(int,$1)> ${6:update} = [&](int i, int val) {
	i += $3; // can be replaced by actual upperbound
	$2[i] = val; i >>= 1;
	while(i > 0) {
		$2[i] = $2[2 * i] + $2[2 * i + 1];
		i >>= 1;
	}
};
function<void()> ${7:fill} = [&] {for(int i=0; i < 2 * $3; ++i) $2[i] = $4;};
endsnippet
snippet fenwick_inline "Fenwick Tree" b
// index starting at 1
${1:int} ${2:fen}[${3:N}];
$1 ${4:get}(int i) {
	$1 ret = 0;
	for(int j = i; j; j -= j & -j) ret += $2[j];
	return ret;
}
void ${5:add}(int i, $1 x) {
	for(int j = i; j < N; j += j & -j) $2[j] += x;
}
endsnippet
snippet fenwick "Fenwick Tree Struct" b
struct fenwick {
	// index starts at 1
	vector<${1:int}> fenw;
	int n;

	fenwick (int _n) : n(_n) {fenw.resize(n+1,${2:0});}

	void add(int x, $1 v){
		// add v to fenw[x]
		for(int i = x; i < n+1; i += i & -i) fenw[i] += v;
	}

	$1 get(int x){
		// return fenw[1] + ... + fenw[x]
		$1 ret = 0;
		for(int j = x; j; j -= j & -j) ret += fenw[j];
		return ret;
	}

	$1 get(int l, int r){
		return get(r) - get(l-1);
	}
};
endsnippet
snippet dsu "Disjoint Set Union" b
struct dsu {
	vector<int> parent;
	dsu(int m){
		parent.resize(m);
		for(int i = 0; i < m; ++i) parent[i] = i;
	}

	int find(int a){
		if(a == parent[a]) return a;
		return parent[a] = find(parent[a]);
	}

	void unite(int a, int b){
		parent[find(a)] = find(b);
	}
};
endsnippet
# }}}
# # Algorithms {{{
# matrix class copied from benq
snippet matrix "Matrix template" b
template<class T> struct mat{
	int r, c;
	vector<vector<T>> d;
	mat(int _r, int _c) : r(_r), c(_c) {d.assign(r,vector<T>(c));}
	mat() : mat(0,0) {}
	mat(const vector<vector<T>>& _d) : r(_d.size()), c(_d[0].size()) {d = _d;}
	mat& operator+=(const mat& m) {
		assert(r == m.r && c == m.c);
		for(int i = 0; i < r; ++i) for(int j = 0; j < c; ++j) d[i][j] += m.d[i][j];
		return *this;
	}
	mat& operator-=(const mat& m) {
		assert(r == m.r && c == m.c);
		for(int i = 0; i < r; ++i) for(int j = 0; j < c; ++j) d[i][j] -= m.d[i][j];
		return *this;
	}
	mat operator*(const mat& m) {
		assert(c == m.r);
		mat x(r,m.c);
		for(int i = 0; i < r; ++i) for(int j = 0; j < c; ++j) for(int k = 0; k < m.c; ++k)
			x.d[i][k] += d[i][j] * m.d[j][k];
		return x;
	}
	mat operator+(const mat& m) { return mat(*this)+=m; }
	mat operator-(const mat& m) { return mat(*this)-=m; }
	mat operator*=(const mat& m) { return *this=(*this)*m; }
};
endsnippet
snippet bsl "Binary Search Least" b
// returns smallest index with >= s;
int ${1:bs}(int s, int l, int r) {
	if(l == r) return l;
	int mid = (l + r)/2;
	if(${2:array}[mid] < s) return $1(s, mid+1, r);
	else return $1(s, l, mid);
}
endsnippet
snippet bsg "Binary Search Greatest" b
// returns largest index with >= s;
int ${1:bs}(int s, int l, int r) {
	if(l == r) return l;
	int mid = (l + r)/2;
	if(${2:array}[mid] > s) return $1(s, l, mid-1);
	else return $1(s, mid, r);
}
endsnippet
snippet bs "Binary Search" b
${1:int} ${2:bl} = ${3:0}, ${4:br} = ${5:n}; // ensure $2 <= ans <= $4
while($2 < $4) {
	$1 ${6:bm} = ($2 + $4) / 2;
	if ( $0 ) $4 = $6;
	else $2 = $6 + 1;
}
endsnippet
snippet fft "Fast Fourier Transform Inplace"
const double PI = acos(-1);

int reverse(int num, int lg_n) {
	int res = 0;
	for(int i = 0; i < lg_n; ++i) {
		if(num & (1 << i))
			res |= 1 << (lg_n - 1 - i);
	}
	return res;
}

void fft(vector<complex<double>> &a, bool invert) {
	int n = a.size();
	int lg_n = 0;
	while((1 << lg_n) < n) lg_n ++;
	
	for(int i = 0; i < n; ++i) {
		if(i < reverse(i,lg_n)) swap(a[i], a[reverse(i,lg_n)]);
	}

	for(int len = 2; len <= n; len <<= 1) {
		double ang = 2 * PI / len * (invert ? -1 : 1);
		complex<double> wlen(cos(ang),sin(ang));
		for(int i = 0; i < n; i+=len) {
			complex<double> w(1);
			for(int j = 0; j < len/2; ++j) {
				complex<double> u = a[i+j], v = a[i+j+len/2] * w;
				a[i + j] = u + v;
				a[i + j + len/2] = u - v;
				w *= wlen;
			}
		}
	}

	if (invert) for(int i = 0; i < n; ++i) a[i] /= n;
}
endsnippet
snippet ntt "NNT in place" b
const int mod = 7340033;
const int root = 5;
const int root_1 = 4404020;
const int root_pw = 1 << 20;

int reverse(int num, int lg_n) {
	int res = 0;
	for(int i = 0; i < lg_n; ++i) {
		if(num & (1 << i))
			res |= 1 << (lg_n - 1 - i);
	}
	return res;
}

void ntt(vector<modular> &a, bool invert) {
	int n = a.size();
	int lg_n = 0;
	while((1 << lg_n) < n) lg_n ++;
	
	for(int i = 0; i < n; ++i) {
		if(i < reverse(i,lg_n)) swap(a[i], a[reverse(i,lg_n)]);
	}

	for(int len = 2; len <= n; len <<= 1) {
		modular wlen = invert ? root_1 : root;
		for(int i = len; i < root_pw; i <<= 1)
			wlen = wlen * wlen;
		for(int i = 0; i < n; i+=len) {
			modular w = 1;
			for(int j = 0; j < len/2; ++j) {
				modular u = a[i+j], v = a[i+j+len/2] * w;
				a[i + j] = u + v;
				a[i + j + len/2] = u - v;
				w *= wlen;
			}
		}
	}

	if (invert) for(int i = 0; i < n; ++i) a[i] /= n;
}
endsnippet
snippet fft_mul "FFT multiplication" b
void mul(vector<complex<double>> &a, vector<complex<double>> b) {
	int pow = 1,n = szof(a) - 1 + szof(b) - 1;
	while(pow < n+1) pow <<= 1;
	a.resize(pow); b.resize(pow);
	fft(a,false); fft(b,false);
	for(int i = 0; i < pow; ++i) a[i] *= b[i];
	fft(a,true);
	a.resize(n+1);
	for(int i = 0; i < n+1; ++i) a[i] = (long long) round(a[i].real());
}
endsnippet
snippet mo_query "Mo's algo - queries" b
int ${1:block} = ${2:550}; // 550^2 > 300000;
struct query{
	int l,r;
	query(int ll,int rr,int ii) {l=ll;r=rr;}
	friend bool operator<(query a, query b) {
		if(a.l/block != b.l/block) return a.l/block < b.l/block;
		else return a.r < b.r;
	}
};
endsnippet
snippet mo_loop "Mo's algo - loop" b
for(query ${1:a} : ${2:q}) {
	if(curl/block < $1.l/block) curl = $1.l, curr = curl, cnt.clear();
	while(curr < $1.r) {
		${3:add_element();}
		curr++;
	}
	while(curl < $1.l) {
		${4:remove_element();}
		curl++;
	}
	while(curl > $1.l) {
		$3
		curl--;
	}
}
endsnippet
# }}}
# # Debug {{{
snippet debug "basic debug" b
cout << "debug-------------: " << $1 << endl;
$0
endsnippet
snippet vector_output "vector output" b
ostream& operator<<(ostream& os, const vector<${1:int}>& v) {
	ostream& ret = os;
	ret << "[ ";
	for(auto it = v.begin(); it != v.end(); ) ret << *it << (++it == v.end() ? "" : ", ");
	ret << " ]";
	return ret;
}
$0
endsnippet
# }}}
# vim:ts=4:sts=4:foldmethod=marker:foldlevel=0:noexpandtab
